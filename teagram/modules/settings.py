import time
import io
import os
import logging
from logging import StreamHandler

from telethon import TelegramClient, types

from .. import loader, utils


class CustomStreamHandler(StreamHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.logs: list = []

    def emit(self, record):
        self.logs.append(record)

        super().emit(record)

handler = CustomStreamHandler()
log = logging.getLogger()
log.addHandler(handler)

@loader.module(name="Settings", author="teagram")
class SettingsMod(loader.Module):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —é–∑–µ—Ä –±–æ—Ç–∞
       Userbot's settings"""

    async def logs_cmd(self, message: types.Message, args: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: logs <—É—Ä–æ–≤–µ–Ω—å>"""
        if not args:
            args = "40"

        lvl = int(args)

        if not args or lvl < 0 or lvl > 60:
            return await utils.answer(
                message, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤")

        handler: CustomStreamHandler = log.handlers[1] # type: ignore
        logs = '\n'.join(str(error) for error in handler.logs).encode('utf-8')
        
        if not logs:
            return await utils.answer(
                message, f"‚ùï –ù–µ—Ç –ª–æ–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ {lvl} ({logging.getLevelName(lvl)})")

        logs = io.BytesIO(logs)
        logs.name = "teagram.log"

        return await utils.answer(
            message,
            logs,
            document=True,
            caption=f"üì§ Teagram –õ–æ–≥–∏ —Å {lvl} ({logging.getLevelName(lvl)}) —É—Ä–æ–≤–Ω–µ–º"
            )
    
    async def setprefix_cmd(self, message: types.Message, args: str):
        """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: setprefix <–ø—Ä–µ—Ñ–∏–∫—Å> [–ø—Ä–µ—Ñ–∏–∫—Å, ...]"""
        if not (args := args.split()):
            return await utils.answer(
                message, "‚ùî –ù–∞ –∫–∞–∫–æ–π –ø—Ä–µ—Ñ–∏–∫—Å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?")

        self.db.set("teagram.loader", "prefixes", list(set(args)))
        prefixes = ", ".join(f"<code>{prefix}</code>" for prefix in args)
        return await utils.answer(
            message, f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {prefixes}")

    async def setlang_cmd(self, message: types.Message, args: str):
        """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: setlang <—è–∑—ã–∫>"""
        args = args.split()
        
        language = args[0]
        languages = list(map(lambda x: x.replace('.yml', ''), os.listdir('teagram/langpacks')))
        
        if not args:
            return await utils.answer(
                message, "‚ùî –ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?")
        
        if language not in languages:
            langs = ' '.join(languages)
            return await utils.answer(
                message, f'‚ùå –Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: <code>{langs}</code>')

        self.db.set("teagram.loader", "lang", language)
        return await utils.answer(
            message, f"‚úÖ –Ø–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language}")

    async def addalias_cmd(self, message: types.Message, args: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–ª–∏–∞—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: addalias <–Ω–æ–≤—ã–π –∞–ª–∏–∞—Å> <–∫–æ–º–∞–Ω–¥–∞>"""
        if not (args := args.lower().split(maxsplit=1)):
            return await utils.answer(
                message, "‚ùî –ö–∞–∫–æ–π –∞–ª–∏–∞—Å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å?")

        if len(args) != 2:
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã."
                        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: addalias <–Ω–æ–≤—ã–π –∞–ª–∏–∞—Å> <–∫–æ–º–∞–Ω–¥–∞>"
            )

        aliases = self.manager.aliases
        if args[0] in aliases:
            return await utils.answer(
                message, "‚ùå –¢–∞–∫–æ–π –∞–ª–∏–∞—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        if not self.manager.command_handlers.get(args[1]):
            return await utils.answer(
                message, "‚ùå –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")

        aliases[args[0]] = args[1]
        self.db.set("teagram.loader", "aliases", aliases)

        return await utils.answer(
            message, f"‚úÖ –ê–ª–∏–∞—Å <code>{args[0]}</code> –¥–ª—è –∫–æ–º–∞–Ω–¥—ã <code>{args[1]}</code> –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω")

    async def delalias_cmd(self, message: types.Message, args: str):
        """–£–¥–∞–ª–∏—Ç—å –∞–ª–∏–∞—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: delalias <–∞–ª–∏–∞—Å>"""
        if not (args := args.lower()):
            return await utils.answer(
                message, "‚ùî –ö–∞–∫–æ–π –∞–ª–∏–∞—Å –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?")

        aliases = self.manager.aliases
        if args not in aliases:
            return await utils.answer(
                message, "‚ùå –¢–∞–∫–æ–≥–æ –∞–ª–∏–∞—Å–∞ –Ω–µ—Ç")

        del aliases[args]
        self.db.set("teagram.loader", "aliases", aliases)

        return await utils.answer(
            message, f"‚úÖ –ê–ª–∏–∞—Å <code>{args}</code> –±—ã–ª —É–¥–∞–ª–µ–Ω")

    async def aliases_cmd(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–ª–∏–∞—Å—ã"""
        aliases = self.manager.aliases
        if not aliases:
            return await utils.answer(
                message, "–ê–ª–∏–∞—Å–æ–≤ –Ω–µ—Ç")

        return await utils.answer(
            message, "üóÑ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–ª–∏–∞—Å–æ–≤:\n" + "\n".join(
                f"‚Ä¢ <code>{alias}</code> ‚ûú {command}"
                for alias, command in aliases.items()
            )
        )

    async def ping_cmd(self, message: types.Message, args: str):
        """üçµ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∏–Ω–≥–∞."""
        start = time.perf_counter_ns()
        
        msg = await message._client.send_message(utils.get_chat(message), "‚òï")
        
        ping = round((time.perf_counter_ns() - start) / 10**6, 3)

        await utils.answer(
            message,
            f"üïí <b>–í—Ä–µ–º—è –æ—Ç–ª–∏–∫–∞ Telegram</b>: <code>{ping}ms</code>"
        )

        await msg.delete()

    @loader.command()
    async def adduser(self, message: types.Message):
        if not (reply := await message.message.get_reply_message()):
            return await utils.answer(
                message,
                '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä–µ–ø–ª–∞–π'
            )

        if reply.sender_id == (_id := (await self.client.get_me()).id):
            return await utils.answer(
                message,
                '‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è'
            )

        if message.message.sender_id != _id:
            return await utils.answer(
                message,
                '‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É'
            )
        
        user = reply.sender_id
        users = self.db.get('teagram.loader', 'users', [])
        self.db.set('teagram.loader', 'users', users + [user])

        await utils.answer(message, '‚úî –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —é–∑–µ—Ä–∞')

    @loader.command()
    async def rmuser(self, message: types.Message):
        if not (reply := await message.message.get_reply_message()):
            return await utils.answer(
                message,
                '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä–µ–ø–ª–∞–π'
            )

        if reply.sender_id == (_id := (await self.client.get_me()).id):
            return await utils.answer(
                message,
                '‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è'
            )

        if message.message.sender_id != _id:
            return await utils.answer(
                message,
                '‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É'
            )
        
        user = reply.sender_id
        users = self.db.get('teagram.loader', 'users', [])
        self.db.set('teagram.loader', 'users', list(filter(lambda x: x != user, users)))

        await utils.answer(message, '‚úî –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —é–∑–µ—Ä–∞')

    @loader.command()
    async def users(self, message: types.Message):
        _users = self.db.get('teagram.loader', 'users', [])
        await utils.answer(
            message,
            ('‚û° –Æ–∑–µ—Ä—ã: <code>' + ', '.join(_users) + '</code>') if _users else "‚ùî –Æ–∑–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        )