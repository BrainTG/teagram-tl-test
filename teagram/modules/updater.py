import os
import sys
import time
import atexit
import logging

from pyrogram import Client, types
from subprocess import check_output
from .. import loader, utils
from aiogram import Bot


@loader.module(name="Updater", author='teagram')
class UpdateMod(loader.Module):
    """üçµ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –≥–∏—Ç–∞ teagram"""
    async def on_load(self, app: Client):
        bot: Bot = self.bot.bot
        me = await app.get_me()

        try:
            last = check_output('git log -1').decode().split()[1]
            local = check_output('git rev-parse HEAD').decode()
            if last != local:
                await bot.send_message(me.id, f'‚úî –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ({last[:6]})')

        except:
            await bot.send_message(
                me.id,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n'
                '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ GIT'
            )

    async def update_cmd(self, app: Client, message: types.Message):
        try:
            await utils.answer(message, '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...')

            check_output('git stash', shell=True).decode()
            output = check_output('git pull', shell=True).decode()
            
            if 'Already up to date.' in output:
                return await utils.answer(message, '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è ‚úî')
            
            def restart() -> None:
                os.execl(sys.executable, sys.executable, "-m", "teagram")

            atexit.register(restart)
            self.db.set(
                "teagram.loader", "restart", {
                    "msg": f"{message.chat.id}:{message.id}",
                    "start": str(round(time.time())),
                    "type": "update"
                }
            )

            await utils.answer(message, "üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

            logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            return sys.exit(0)
        except Exception as error:
            await utils.answer(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}')
