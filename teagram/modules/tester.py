import io
import logging
from datetime import datetime
from logging import StreamHandler

from pyrogram import Client, types

from .. import loader, logger, utils

class CustomStreamHandler(logging.StreamHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.logs: list = []

    def emit(self, record):
        self.logs.append(record)

        super().emit(record)

handler = CustomStreamHandler()
log = logging.getLogger()
log.addHandler(handler)

@loader.module(name="Tester", author="teagram")
class TesterMod(loader.Module):
    """–¢–µ—Å—Ç —á–µ–≥–æ-—Ç–æ"""
    async def logs_cmd(self, app: Client, message: types.Message, args: str):
        app.me = await app.get_me()
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: logs <—É—Ä–æ–≤–µ–Ω—å>"""
        lvl = 40  # ERROR

        if args and not (lvl := logger.get_valid_level(args)):
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤")

        handler: CustomStreamHandler = log.handlers[1]
        logs = '\n'.join(str(error) for error in handler.logs).encode('utf-8')
        if not logs:
            return await utils.answer(
                message, f"‚ùï –ù–µ—Ç –ª–æ–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ {lvl} ({logging.getLevelName(lvl)})")

        logs = io.BytesIO(logs)
        logs.name = "teagram.log"

        return await utils.answer(
            message, logs, doc=True, quote=False,
            caption=f"üì§ TeaGram –õ–æ–≥–∏ —Å {lvl} ({logging.getLevelName(lvl)}) —É—Ä–æ–≤–Ω–µ–º"
            )
