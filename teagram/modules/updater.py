import os
import sys
import time
import atexit
import logging

from pyrogram import Client, types
from subprocess import check_output
from .. import loader, utils


@loader.module(name="Updater", author='teagram')
class UpdateMod(loader.Module):
    """üçµ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –≥–∏—Ç–∞ teagram"""

    async def update_cmd(self, app: Client, message: types.Message):
        try:
            await utils.answer(message, '–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...')

            check_output('git stash', shell=True).decode()
            output = check_output('git pull', shell=True).decode()
            
            if 'Already up to date.' in output:
                return await utils.answer(message, '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è ‚úî')
            
            def restart() -> None:
                os.execl(sys.executable, sys.executable, "-m", "teagram")

            atexit.register(restart)
            self.db.set(
                "teagram.loader", "restart", {
                    "msg": f"{message.chat.id}:{message.id}",
                    "start": str(round(time.time())),
                    "type": "update"
                }
            )

            await utils.answer(message, "üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

            logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            return sys.exit(0)
        except Exception as error:
            await utils.answer(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}')
