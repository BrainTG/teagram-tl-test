import logging

import os
import re
import sys
import time


import atexit

import requests

from typing import List

from telethon import types
from telethon.tl.custom import Message
from .. import loader, utils

VALID_URL = r"[-[\]_.~:/?#@!$&'()*+,;%<=>a-zA-Z0-9]+"
VALID_PIP_PACKAGES = re.compile(
    r"^\s*# required:(?: ?)((?:{url} )*(?:{url}))\s*$".format(url=VALID_URL),
    re.MULTILINE,
)


@loader.module(name="Loader", author='teagram')
class LoaderMod(loader.Module):
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥—É–ª–µ–π"""

    async def loadraw_cmd(self, message: Message, args: str):
        if not args:
            return await utils.answer(
                message,
                '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Å—ã–ª–∫—É'
            )
        
        try:
            response = await utils.run_sync(requests.get, args)
            module = await self.manager.load_module(response.text, response.url)

            if module is True:
                return await utils.answer(
                    message, "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞")

            if not module:
                return await utils.answer(
                    message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö")

            
            await utils.answer(
                message, 
                f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module}</code>\" –∑–∞–≥—Ä—É–∂–µ–Ω"
            )

        except requests.exceptions.MissingSchema:
            await utils.answer(message, '‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É')
        except Exception as error:
            await utils.answer(message, f'‚ùå –û—à–∏–±–∫–∞: <code>{error}</code>')

    async def loadmod_cmd(self,  message: Message):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ —Ñ–∞–π–ª—É. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <—Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–∞–π–ª>"""
        reply: Message = await message.get_reply_message()
        file = (
            message
            if message.document
            else reply
            if reply and reply.document
            else None
        )

        if not file:
            return await utils.answer(
                message, "‚ùå –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ —Ñ–∞–π–ª")

        _file = await reply.download_media(bytes)

        try:
            _file = _file.decode()
        except UnicodeDecodeError:
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞")

        modules = [
            '_example'
            'config',
            'eval',
            'help',
            'info',
            'moduleGuard',
            'terminal',
            'tester',
            'updater'
        ]
        
        for mod in modules:
            if _file == mod:
                return await utils.answer(
                    message,
                    "‚ùå –ù–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"
                )

        module_name = await self.manager.load_module(_file)
        module = '_'.join(module_name.lower().split())

        if module_name is True:
            with open(f'teagram/modules/{module}.py', 'w', encoding="utf-8") as file:
                file.write(_file)

            return await utils.answer(
                message, "‚úÖ <b>–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞</b>")

        if not module_name:
            return await utils.answer(
                message, "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö</b>")
        
        with open(f'teagram/modules/{module}.py', 'w', encoding="utf-8") as file:
            file.write(_file)
        
        await utils.answer(
            message, f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module_name}</code>\" –∑–∞–≥—Ä—É–∂–µ–Ω")

    async def unloadmod_cmd(self,  message: types.Message, args: str):
        """–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: unloadmod <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è>"""
        if not (module_name := self.manager.unload_module(args)):
            return await utils.answer(
                message, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è")
        
        modules = [
            'config',
            'eval',
            'help',
            'info',
            'moduleGuard',
            'terminal',
            'tester',
            'updater',
            'loader'
        ]
        
        if module_name in modules:
            return await utils.answer(
                message,
                "‚ùå –í—ã–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–ª—å–∑—è"
            )

        return await utils.answer(
            message, f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module_name}</code>\" –≤—ã–≥—Ä—É–∂–µ–Ω")
    
    async def reloadmod_cmd(self,  message: types.Message, args: str):
        if not args:
            return await utils.answer(
                message, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –º–æ–¥—É–ª—å")
        
        try:
            module = args.split(maxsplit=1)[0].replace('.py', '')

            modules = [
                'config',
                'eval',
                'help',
                'info',
                'moduleGuard',
                'terminal',
                'tester',
                'updater',
                'loader'
            ]
            
            # for mod in modules:
            #     if module == mod:
            #         return await utils.answer(
            #             message,
            #             "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"
            #         )

            if module + '.py' not in os.listdir('teagram/modules'):
                return await utils.answer(
                    message,
                    f'‚ùå –ú–æ–¥—É–ª—å {module} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                )
            
            unload = self.manager.unload_module(module)
            with open(f'teagram/modules/{module}.py', encoding='utf-8') as file:
                module_source = file.read()

            load = await self.manager.load_module(module_source)

            if not load and not unload:
                return await utils.answer(
                    message,
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏'
                )
        except Exception as error:
            logging.error(error)
            return await utils.answer(
                message,
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏'
            )


        return await utils.answer(
            message, f"‚úÖ –ú–æ–¥—É–ª—å \"<code>{module}</code>\" –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")

    async def restart_cmd(self, message: types.Message):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞"""
        def restart() -> None:
            """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —é–∑–µ—Ä–±–æ—Ç–∞"""
            os.execl(sys.executable, sys.executable, "-m", "teagram")

        atexit.register(restart)
        self.db.set(
            "teagram.loader", "restart", {
                "msg": f"{((message.chat.id) if message.chat else 0 or message._chat_peer)}:{message.id}",
                "start": time.time(),
                "type": "restart"
            }
        )

        await utils.answer(message, "<b><emoji id=5328274090262275771>üîÅ</emoji> –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...</b>")

        logging.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
        return sys.exit(0)
    